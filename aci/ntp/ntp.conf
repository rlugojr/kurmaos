name: "ntp"

# Set the base stage4 as build dependencies. The final output of this is an ACI
# image that is compiled with the stage4 image.
build_depends [ { package: "gentoo-stage4" } ]

# Include the local files, such as the JSON for the image manifest.
include_files [
  "manifest.json"
  "start.sh"
]

# We'll want to snapshot a specific path within the container, not the whole
# container.
snapshot_path: "/aci"

build (
    export BUILDPATH=`pwd`
    export INSTALLPATH=/aci/rootfs

    mkdir -p $INSTALLPATH

    mv $BUILDPATH/manifest.json /aci/manifest
    chown 0:0 /aci/manifest

    (
      cd $INSTALLPATH

      # copy in the startup script
      mv $BUILDPATH/start.sh .
      chown 0:0 start.sh
      chmod a+x start.sh

      # copy in busybox
      cp /bin/busybox .
      ln -s busybox sh
      ln -s busybox ntpd

      # setup etc and lib folders
      mkdir etc lib
      ln -s lib lib64
      echo "127.0.0.1 localhost localhost.localdomain" > etc/hosts

      # copy libnss so it can do dns
      cp /etc/nsswitch.conf etc/
      cp /lib/libc.so.6 lib/
      cp /lib/ld-linux-x86-64.so.2 lib/
      cp /lib/libnss_dns-2.20.so lib/
      cp /lib/libnss_files-2.20.so lib/
      cp /lib/libresolv-2.20.so lib/
      ln -s libnss_dns-2.20.so lib/libnss_dns.so.2
      ln -s libnss_files-2.20.so lib/libnss_files.so.2
      ln -s libresolv-2.20.so lib/libresolv.so.2

      # generate ld.so.cache
      echo "/lib" > etc/ld.so.conf
      ldconfig -r . -C etc/ld.so.cache -f etc/ld.so.conf
    )
)
