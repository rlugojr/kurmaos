name: "kurma-api"

# Set the base stage4 as build dependencies. The final output of this is an ACI
# image that is compiled with the stage4 image.
build_depends [ { package: "gentoo-stage4" } ]

# Include the local files, such as the JSON for the image manifest.
include_files [
  "manifest.json"
  "../../output/code.tar.gz"
]

# We'll want to snapshot a specific path within the container, not the whole
# container.
snapshot_path: "/aci"

build (
    export BUILDPATH=`pwd`
    export INSTALLPATH=/aci/rootfs

    mkdir -p $INSTALLPATH

    mv $BUILDPATH/manifest.json /aci/manifest
    chown 0:0 /aci/manifest

    # compile the kurma api binary
    (
      export GOPATH="$BUILDPATH/go:$BUILDPATH/go/src/github.com/apcera/kurma/Godeps/_workspace"
      mkdir -p $BUILDPATH/go/src
      tar xzf code.tar.gz -C $BUILDPATH/go/src
      go build -a -o $INSTALLPATH/kurma-api $BUILDPATH/go/src/github.com/apcera/kurma/kurma-api.go
    )

    (
      cd $INSTALLPATH

      # setup lib folder
      mkdir lib
      ln -s lib lib64

      # copy needed dynamic libraries
      LD_TRACE_LOADED_OBJECTS=1 ./kurma-api | grep so | grep -v linux-vdso.so.1 \
        | sed -e '/^[^\t]/ d' \
        | sed -e 's/\t//' \
        | sed -e 's/.*=..//' \
        | sed -e 's/ (0.*)//' \
        | xargs -I % cp % lib/
    )
)
