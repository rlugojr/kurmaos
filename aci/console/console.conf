name: "kurma-aci-console"

# Download buildroot to compile against.
sources [ { url: "http://buildroot.uclibc.org/downloads/buildroot-2015.02.tar.gz" } ]

# Set the base stage4 as build dependencies. The final output of this is an ACI
# image of a buildroot system, but buildroot is compiled with the stage4 image.
build_depends [ { package: "gentoo-stage4" } ]

include_files [
  "buildroot.config"
  "busybox.config"
  "../../output/code.tar.gz"
  "manifest.json"
  "spawn.json"
  "start.sh"
]

# THe output of the build script will be an ACI image of the console.
snapshot_path: "/aci"

build (
    source /etc/profile
    export BUILDPATH=`pwd`
    export INSTALLPATH=/aci/rootfs

    mkdir -p $INSTALLPATH

    # extract and compile buildroot
    (
      tar xzf buildroot-2015.02.tar.gz
      mv buildroot.config buildroot-2015.02/.config
      mv busybox.config buildroot-2015.02/busybox.config
      cd buildroot-2015.02
      make
      tar xzf output/images/rootfs.tar.gz -C $INSTALLPATH --exclude=./dev
      mkdir -p $INSTALLPATH/dev
    )

    # setup the image
    (
      cd $INSTALLPATH
      rm -f init linuxrc
      mv $BUILDPATH/spawn.json etc/spawn.conf
      mv $BUILDPATH/start.sh start.sh
      chown 0:0 etc/spawn.conf start.sh
      chmod a+x start.sh
    )

    # compile the kurma cli and spawn binary
    (
      export GOPATH=$BUILDPATH/go
      mkdir -p $GOPATH/src
      tar xzf code.tar.gz -C $GOPATH/src
      go build -a -o $INSTALLPATH/usr/bin/kurma-cli $GOPATH/src/github.com/apcera/kurma/kurma-cli.go
      go build -a -o $INSTALLPATH/sbin/spawn $GOPATH/src/github.com/apcera/util/spawn/spawn.go
    )

    # setup the ACI manifest
    mv manifest.json /aci/manifest
    chown 0:0 /aci/manifest
)