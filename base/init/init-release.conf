name: "kurma-init"

# Set the base stage4 and prebuild kernel as build dependencies. They are only
# build dependencies because they aren't needed after the package is built.
build_depends [ { package: "gentoo-stage4" }
                { package: "gentoo-kernel" } ]

include_files [
  "../../output/code.tar.gz"
  "kurma_init.sh"
  "kurma.json"
  "../../output/ntp.aci"
  "../../output/console.aci"
  "../../output/api.aci"
  "resizefs.sh"
]

# The output is the raw kernel which has the initramfs embedded within it.
output_path: "/usr/src/linux/arch/x86/boot/bzImage"

build (
    source /etc/profile
    export BUILDPATH=`pwd`
    export INSTALLPATH=/rootfs
    export GOPATH=$BUILDPATH

    mkdir -p $INSTALLPATH

    # extract the code
    (
      mkdir -p $BUILDPATH/src
      cd $BUILDPATH/src
      gunzip -c $BUILDPATH/code.tar.gz | tar xf -
    )

    # build kurma
    (
      cd $BUILDPATH/src/github.com/apcera/kurma
      go build -a kurma-init.go
      mv ./kurma-init $INSTALLPATH/kurma
    )

    # configure the root filesystem

    # copy in acis
    cp *.aci $INSTALLPATH/

    (
      cd $INSTALLPATH

      # configure the init script
      mv $BUILDPATH/kurma_init.sh init
      chmod 755 init

      # create bin directories
      mkdir -p bin sbin

      # copy busybox and setup necessary links
      cp /bin/busybox bin/busybox
      ln -s busybox bin/blockdev
      ln -s busybox bin/cat
      ln -s busybox bin/cp
      ln -s busybox bin/grep
      ln -s busybox bin/mkdir
      ln -s busybox bin/mktemp
      ln -s busybox bin/modprobe
      ln -s busybox bin/mount
      ln -s busybox bin/ps
      ln -s busybox bin/rm
      ln -s busybox bin/sh
      ln -s busybox bin/udhcpc

      ln -s ../bin/busybox sbin/ifconfig
      ln -s ../bin/busybox sbin/route
      ln -s ../bin/busybox sbin/switch_root

      # udhcpc script
      mkdir -p usr/share/udhcpc
      cp /usr/share/udhcpc/default.script usr/share/udhcpc/default.script

      # formatting tools
      cp /sbin/mke2fs bin/mke2fs
      ln -s mke2fs bin/mkfs.ext2
      ln -s mke2fs bin/mkfs.ext3
      ln -s mke2fs bin/mkfs.ext4
      ln -s mke2fs bin/mkfs.ext4dev
      cp /sbin/resize2fs bin/resize2fs
      cp /usr/bin/cgpt bin/cgpt

      # cgpt has this weird hard coded path for a child cgpt
      mkdir -p bin/old_bins
      cp /usr/bin/old_bins/cgpt bin/old_bins/cgpt

      # setup etc
      mkdir -p etc/ssl/certs
      mv $BUILDPATH/kurma.json etc/kurma.json
      chown 0:0 etc/kurma.json
      touch etc/resolv.conf
      echo 'LSB_VERSION=1.4' > etc/lsb-release
      echo 'DISTRIB_ID=KurmaOS' > etc/lsb-release
      echo 'DISTRIB_RELEASE=rolling' > etc/lsb-release
      echo 'DISTRIB_DESCRIPTION=KurmaOS' > etc/lsb-release

      # copy kurma and needed dynamic libraries
      mkdir -p lib
      ln -s lib lib64
      LD_TRACE_LOADED_OBJECTS=1 ./kurma | grep so | grep -v linux-vdso.so.1 \
        | sed -e '/^[^\t]/ d' \
        | sed -e 's/\t//' \
        | sed -e 's/.*=..//' \
        | sed -e 's/ (0.*)//' \
        | xargs -I % cp % lib/
      LD_TRACE_LOADED_OBJECTS=1 ./bin/old_bins/cgpt | grep so | grep -v linux-vdso.so.1 \
        | sed -e '/^[^\t]/ d' \
        | sed -e 's/\t//' \
        | sed -e 's/.*=..//' \
        | sed -e 's/ (0.*)//' \
        | xargs -I % cp % lib/
      LD_TRACE_LOADED_OBJECTS=1 ./bin/resize2fs | grep so | grep -v linux-vdso.so.1 \
        | sed -e '/^[^\t]/ d' \
        | sed -e 's/\t//' \
        | sed -e 's/.*=..//' \
        | sed -e 's/ (0.*)//' \
        | xargs -I % cp % lib/

      # copy libnss so it can do dns
      cp /etc/nsswitch.conf etc/
      cp /lib/libc.so.6 lib/
      cp /lib/ld-linux-x86-64.so.2 lib/
      cp /lib/libnss_dns-2.20.so lib/
      cp /lib/libnss_files-2.20.so lib/
      cp /lib/libresolv-2.20.so lib/
      ln -s libnss_dns-2.20.so lib/libnss_dns.so.2
      ln -s libnss_files-2.20.so lib/libnss_files.so.2
      ln -s libresolv-2.20.so lib/libresolv.so.2

      # generate ld.so.cache
      echo "/lib" > etc/ld.so.conf
      ldconfig -r . -C etc/ld.so.cache -f etc/ld.so.conf
    )

    # update the kernel configuration to bundle the initramfs and rebuild it.
    (
      cd /usr/src/linux
      sed -e 's#CONFIG_INITRAMFS_SOURCE.*$#CONFIG_INITRAMFS_SOURCE="/rootfs"##' -i .config
      echo 'CONFIG_INITRAMFS_ROOT_UID=0' >> .config
      echo 'CONFIG_INITRAMFS_ROOT_GID=0' >> .config
      make -j3 modules_install
      rsync -a /lib/modules $INSTALLPATH/lib/
      make -j3 bzImage
    )
)
